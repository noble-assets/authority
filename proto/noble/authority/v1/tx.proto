syntax = "proto3";

package noble.authority.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/noble-assets/authority/x/authority/types";

service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc Execute(MsgExecute) returns (MsgExecuteResponse);
  rpc TransferAuthority(MsgTransferAuthority) returns (MsgTransferAuthorityResponse);
  rpc AcceptAuthority(MsgAcceptAuthority) returns (MsgAcceptAuthorityResponse);
}

//

message MsgExecute {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "noble/Execute";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated google.protobuf.Any messages = 2;
}

message MsgExecuteResponse {
  repeated bytes results = 1;
}

message MsgTransferAuthority {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "noble/TransferAuthority";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string new_authority = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgTransferAuthorityResponse {}

message MsgAcceptAuthority {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "noble/AcceptAuthority";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgAcceptAuthorityResponse {}
